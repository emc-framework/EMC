buildscript {
    repositories {
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${project.forgeGradleVersion}"
        classpath "org.spongepowered:mixingradle:${project.mixinGradleVersion}"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    }
}

def forgeBuild = project.hasProperty('forgebuild') ? project.property('forgebuild').toBoolean() : false

group = 'me.deftware'
version = project.version

apply plugin: 'maven'
apply plugin: 'java'
if (forgeBuild) {
	apply plugin: 'net.minecraftforge.gradle.forge'
} else {
	apply plugin: 'net.minecraftforge.gradle.tweaker-client'
}
apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = targetCompatibility = 1.8
compileJava {
    sourceCompatibility = targetCompatibility = 1.8
}

minecraft {
    version = forgeBuild ? project.minecraftVersion + project.forgeVersion : project.minecraftVersion
    runDir = 'run'
    mappings = project.mappingsVer
    useDepAts = true
    makeObfSourceJar = true
    if (!forgeBuild) {
		tweakClass = 'me.deftware.launch.Launcher'
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'spongepowered-repo'
        url = 'http://repo.spongepowered.org/maven/'
    }
    maven { url 'https://jitpack.io' }
}

configurations {
    deps
    compile {
        extendsFrom deps
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.5-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    compile 'com.github.vbauer:yandex-translate-api:1.3.3'
}

mixin {
    defaultObfuscationEnv forgeBuild ? searge : notch
    add sourceSets.main, "mixins.client.refmap.json"
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('com.github.vbauer:yandex-translate-api'))
    }
    classifier = 'full'
}

task createPom << {
    pom {
        project {
            groupId "me.deftware"
            artifactId "EMC"
            version "${version}-${project.minecraftVersion}"
        }
    }.writeTo("maven/me/deftware/EMC/${version}-${project.minecraftVersion}/EMC-${version}-${project.minecraftVersion}.pom")
}

task copyBuilds(type: Copy) {
    //delete "$rootDir/maven/me/deftware/" + (forgeBuild ? "EMC-Forge" : "EMC") + "/${version}-${project.minecraftVersion}"
    from "$rootDir/build/libs"
    into "$rootDir/maven/me/deftware/" + (forgeBuild ? "EMC-Forge" : "EMC") + "/${version}-${project.minecraftVersion}/"
    if (forgeBuild) {
    	rename { String fileName ->
		    fileName.replace("EMC", "EMC-Forge")
		}
    }
    rename { String fileName ->
		fileName.replace(version, "${version}-${project.minecraftVersion}")
	}
}

reobf {
    shadowJar {
        mappingType = forgeBuild ? 'SEARGE' : 'NOTCH'
        classpath = sourceSets.main.compileClasspath
    }
}

if (forgeBuild) {
	jar {
	    manifest.attributes(
                "EMC-Version": version,
                "EMC-ForgeBuild": forgeBuild,
	            "MixinConfigs": 'mixins.client.json',
	            "tweakClass": 'org.spongepowered.asm.launch.MixinTweaker',
	            "TweakOrder": 0,
	            "FMLCorePluginContainsFMLMod": 'me.deftware.forge.MixinLoader',
	            "Manifest-Version": 1.0
	    )
	}
} else {
    jar {
        manifest.attributes(
                "EMC-Version": version,
                "EMC-ForgeBuild": forgeBuild,
                "Manifest-Version": 1.0
        )
    }
}

println "Building EMC ${version} for " + (forgeBuild ? "Forge" : "vanilla Minecraft") + "..."
delete "$rootDir/build/libs"
build.dependsOn(shadowJar)
if (!forgeBuild) {
	build.dependsOn(createPom)
}

build.dependsOn(copyBuilds)

tasks.build.doLast(){
	if (forgeBuild) {
		copy {
			from "$rootDir/build/libs/EMC-${version}-full.jar"
			into "$rootDir/run/mods/"
			rename("EMC-${version}-full.jar", "EMC.jar")
		}
	}
}
